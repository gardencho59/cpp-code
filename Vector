#include <iostream>
#include<algorithm>

using namespace std;

template <typename T>


class SimpleVector {
private:
	T* data;
	int currentSize;
	int currentCapacity;

	
public:

	SimpleVector() {
		currentSize = 0;
		currentCapacity = 10;
		data = new T[currentCapacity];
	}
	SimpleVector(int capacity) {
		currentSize = 0;
		currentCapacity = capacity;
		data = new T[capacity];
	}

	~SimpleVector() {
		delete[] data;
	}


	void resize(int newCapacity) {
		currentCapacity = newCapacity;
		T* newData = new T[currentCapacity];

		for (int i = 0; i < currentSize; ++i) {
			newData[i] = data[i];
		}

		delete[] data;
		data = newData;
	}

	void push_back(const T& value) {
		if (currentSize == currentCapacity) {
			resize(currentCapacity + 5);
		}
		data[currentSize] = value;
		currentSize++;
	}

	void pop_back() {
		if (currentSize > 0) {
			--currentSize;
		}
	}

	void sortData() {
		sort(data, data + currentSize);
	}

	int size() {
		return currentSize;
	}

	int capacity() {
		return currentCapacity;
	}
};

int main() {
	SimpleVector<string> vec;
	return 0;
}
